create schema opt authorization postgres;

--alter table pangkat_riwayat alter column pangkat_riwayat_id type numeric using cast(pangkat_riwayat_id as numeric);

alter table pegawai add column pangkat_riwayat_id numeric, add column jabatan_riwayat_id numeric, add column jabatan_tambahan_id numeric, add column pendidikan_riwayat_id numeric, add column hukuman_id numeric, add column diklat_struktural_id numeric;

alter table pegawai add column format_nip_baru character varying;
alter table pegawai add column vnama_lengkap character varying;

create or replace view opt.pangkat_terakhir_riwayat as 
select
a.pangkat_riwayat_id, a.pegawai_id
from
(
	select a.pangkat_riwayat_id, a.pegawai_id
	, row_number () over ( partition by a.pegawai_id order by a.tmt_pangkat desc, a.tanggal_sk desc ) urut
	from pangkat_riwayat a
) a
where urut = 1
order by a.pegawai_id
;

update pegawai as u
set
pangkat_riwayat_id= aggr.pangkat_riwayat_id
from
(
	select a.pegawai_id, a.pangkat_riwayat_id
	from opt.pangkat_terakhir_riwayat a
	where 1=1
) as aggr
where u.pegawai_id = aggr.pegawai_id;

create or replace view opt.jabatan_terakhir_riwayat as 
select
a.jabatan_riwayat_id, a.pegawai_id
from
(
	select a.jabatan_riwayat_id, a.pegawai_id
	, row_number () over ( partition by a.pegawai_id order by a.tmt_jabatan desc ) urut
	from jabatan_riwayat a
) a
where urut = 1
order by a.pegawai_id
;

update pegawai as u
set
jabatan_riwayat_id= aggr.jabatan_riwayat_id
from
(
	select a.pegawai_id, a.jabatan_riwayat_id
	from opt.jabatan_terakhir_riwayat a
	where 1=1
) as aggr
where u.pegawai_id = aggr.pegawai_id;

create or replace view opt.jabatan_tambahan_terakhir_riwayat as 
select
a.jabatan_tambahan_id, a.pegawai_id
from
(
	select a.jabatan_tambahan_id, a.pegawai_id
	, row_number () over ( partition by a.pegawai_id order by a.tmt_jabatan desc ) urut
	from jabatan_tambahan a
) a
where urut = 1
order by a.pegawai_id
;

update pegawai as u
set
jabatan_tambahan_id= aggr.jabatan_tambahan_id
from
(
	select a.pegawai_id, a.jabatan_tambahan_id
	from opt.jabatan_tambahan_terakhir_riwayat a
	where 1=1
) as aggr
where u.pegawai_id = aggr.pegawai_id;

create or replace view opt.pendidikan_terakhir_riwayat as 
select
a.pendidikan_riwayat_id, a.pegawai_id
from
(
	select a.pendidikan_riwayat_id, a.pegawai_id
	, row_number () over ( partition by a.pegawai_id order by b.urutan desc ) urut
	from pendidikan_riwayat a
	join pendidikan b on a.pendidikan_id = b.pendidikan_id
) a
where urut = 1
order by a.pegawai_id
;

update pegawai as u
set
pendidikan_riwayat_id= aggr.pendidikan_riwayat_id
from
(
	select a.pegawai_id, a.pendidikan_riwayat_id
	from opt.pendidikan_terakhir_riwayat a
	where 1=1
) as aggr
where u.pegawai_id = aggr.pegawai_id;

create or replace view opt.hukuman_terakhir_riwayat as 
select
a.hukuman_id, a.pegawai_id
from
(
	select a.hukuman_id, a.pegawai_id
	, row_number () over ( partition by a.pegawai_id order by a.tmt_sk desc ) urut
	from hukuman a
) a
where urut = 1
order by a.pegawai_id
;

update pegawai as u
set
hukuman_id= aggr.hukuman_id
from
(
	select a.pegawai_id, a.hukuman_id
	from opt.hukuman_terakhir_riwayat a
	where 1=1
) as aggr
where u.pegawai_id = aggr.pegawai_id;

create or replace view opt.diklat_struktural_terakhir_riwayat as 
select
a.diklat_struktural_id, a.pegawai_id
from
(
	select a.diklat_struktural_id, a.pegawai_id
	, row_number () over ( partition by a.pegawai_id order by a.tanggal_sttpp desc ) urut
	from diklat_struktural a
) a
where urut = 1
order by a.pegawai_id
;

update pegawai as u
set
diklat_struktural_id= aggr.diklat_struktural_id
from
(
	select a.pegawai_id, a.diklat_struktural_id
	from opt.diklat_struktural_terakhir_riwayat a
	where 1=1
) as aggr
where u.pegawai_id = aggr.pegawai_id;
--====================================================================================================================
create or replace function ambil_umur_duk(tanggal_lahir date, tanggal_sekarang date)
  returns character varying as
$body$
declare 
vreturn character varying;
begin
	select
	case
		when (to_number (to_char (tanggal_sekarang, 'mm'), '9999') - to_number (to_char (tanggal_lahir, 'mm'), '9999')) < 0
	then
		to_number (to_char (tanggal_sekarang, 'yyyy'), '9999') - to_number (to_char (tanggal_lahir, 'yyyy'), '9999') - 1
	else
		to_number (to_char (tanggal_sekarang, 'yyyy'), '9999') - to_number (to_char (tanggal_lahir, 'yyyy'), '9999')
	end
	||
	' - '
	||
	case
	when (to_number (to_char (tanggal_sekarang, 'mm'), '9999') - to_number (to_char (tanggal_lahir, 'mm'), '9999')) < 0
	then
		12 + to_number (to_char (tanggal_sekarang, 'mm'), '9999') - to_number (to_char (tanggal_lahir, 'mm'), '9999')
	else
		to_number (to_char (tanggal_sekarang, 'mm'), '9999') - to_number (to_char (tanggal_lahir, 'mm'), '9999')
	end
	into vreturn;
	return(vreturn);
end;
$body$
language plpgsql volatile cost 100;
alter function ambil_umur_duk(date, date) owner to postgres;

create or replace function ambil_satker_id(satkerid character varying)
returns character varying as
$body$
declare
vreturn character varying;
vparent character varying;
begin
	select satker_id_parent into vparent from satker where satker_id = satkerid;

	if substr(satkerid, 1, 6) = '010101' then
		vreturn:= '010101';
	elsif substr(satkerid, 1, 6) = '010104' then
		vreturn:= '010104'; 
	elsif substr(satkerid, 1, 6) = '010105' then
		vreturn:= '010105';
	elsif substr(satkerid, 1, 6) = '010201' then
		vreturn:= '010201'; 
	elsif substr(satkerid, 1, 6) = '010202' then
		vreturn:= '010202';
	elsif substr(satkerid, 1, 6) = '010205' then
		vreturn:= '010205';
	elsif substr(satkerid, 1, 6) = '010301' then
		vreturn:= '010301';
	elsif substr(satkerid, 1, 6) = '010302' then
		vreturn:= '010302';
	elsif substr(satkerid, 1, 6) = '010303' then
		vreturn:= '010303';
	elsif substr(satkerid, 1, 6) = '010304' then
		vreturn:= '010304';
	--elsif length(satkerid) = 4 and satkerid like '01%' then
		--vreturn:= satkerid;
	elsif vparent like '01%' = false then
		vreturn:= satkerid;
	else
		vreturn:= substr(satkerid, 1, 2);
	end if;
return vreturn;
end;
$body$
language plpgsql volatile cost 100;
alter function ambil_satker_id(character varying) owner to postgres;

create or replace function ambil_satker_nama(satkerid character varying)
returns character varying as
$body$
declare
vreturn character varying;
vnama character varying;
vid character varying;
vcheckid character varying;
begin

	for i in 0 .. (length(satkerid) / 2) - 1 loop
		--if length(satkerid) = 4 and satkerid like '01%' and i = 0 then
		if satkerid in ('0101', '0102', '0103', '0104', '0105', '0106') and i = 0 then
			vid:= satkerid;
		else
			vid:= ambil_satker_id(substr(satkerid, 1, length(satkerid) - (i * 2)));
		end if;

		if vcheckid = vid then
			vreturn := vreturn;
		else
			select nama into vnama from satker where satker_id = vid;

			if i = 0 then
			vreturn := vnama;
			else
			vreturn := vnama || ' - ' || vreturn;
			end if;
		end if;

		vcheckid:= vid;

	end loop;
	--raise notice 'sql %', vreturn;

	return vreturn;

end;
$body$
language plpgsql volatile cost 100;
alter function ambil_satker_nama(character varying) owner to postgres;

alter table satker add column vsatker_nama_detil character varying;
create or replace function psatker_detil_info()
  returns trigger as
$body$
declare
	vsatker_nama_detil character varying;
begin
	
	vsatker_nama_detil:= ambil_satker_nama(new.satker_id);
	new.vsatker_nama_detil:= vsatker_nama_detil;

  	return new;
   
end;
$body$
language plpgsql volatile cost 100;
alter function psatker_detil_info() owner to postgres;
  
drop trigger if exists tsatker_detil_info on satker;
create trigger tsatker_detil_info
before insert or update
on satker
for each row
execute procedure psatker_detil_info();

update satker as u
set
satker_id= aggr.satker_id
from
(
  select a.satker_id
  from satker a
  where 1=1
) as aggr
where u.satker_id = aggr.satker_id;

create or replace function getformatnipbaru(vnip character varying)
returns character varying as
$body$
declare
vreturn character varying;
begin
	select
	substr(vnip, 0, 8) || ' ' || substr(vnip, 9, 6) || ' ' || substr(vnip, 15, 1) || ' ' || substr(vnip, 16, 3) vnip
	into vreturn;
	
	return vreturn;
end;
$body$
language plpgsql volatile
cost 100;
alter function getformatnipbaru(character varying)
owner to postgres;

alter table pegawai add column vtmt_pensiun date;
alter table pegawai add column vttl character varying;

create or replace function ppegawai_detil_info()
  returns trigger as
$body$
declare
	var_id integer;
	varcheck integer;
	format_nip_baru character varying;
	gelar_depan character varying;
	gelar_belakang character varying;
	nama character varying;
	vnama_lengkap character varying;
	vtipepegawaiid character varying;
	veselonid character varying;
	vjabatan character varying;
	vtmt_pensiun date;
	vtanggal_lahir date;
	vttl character varying;

	/*
	info_satuan_kerja_nama character varying;
	info_satuan_kerja_induk character varying;
	info_satuan_kerja_detil character varying;
	*/
begin

	/*if new.satuan_kerja_id is not null then
		select ambil_satker_nama_dynamic(new.satuan_kerja_id) into info_satuan_kerja_nama;
		select ambil_satker_induk(new.satuan_kerja_id) into info_satuan_kerja_induk;
		select ambil_satker_nama_detil(new.satuan_kerja_id) into info_satuan_kerja_detil;

		new.info_satuan_kerja_nama:= info_satuan_kerja_nama;
		new.info_satuan_kerja_induk:= info_satuan_kerja_induk;
		new.info_satuan_kerja_detil:= info_satuan_kerja_detil;
	end if;*/

	--untuk membuat format nip baru
	if coalesce(nullif(new.nip_baru, ''), null) is not null then
		select getformatnipbaru(new.nip_baru) into format_nip_baru;
		new.format_nip_baru:= format_nip_baru;
	end if;

	--untuk membuat nama lengkap
	gelar_depan:= new.gelar_depan;
	gelar_belakang:= new.gelar_belakang;
	nama:= new.nama;

	if coalesce(nullif(gelar_depan, ''), null) is null then vnama_lengkap:= '';
	else vnama_lengkap:= replace(gelar_depan, '.', '') || '. ';
	end if;

	vnama_lengkap:= vnama_lengkap || nama;

	if coalesce(nullif(gelar_belakang, ''), null) is not null then
		vnama_lengkap:= vnama_lengkap || ', ' || gelar_belakang;
	end if;
	--raise notice 'sql %',vnama_lengkap;

	new.vnama_lengkap:= vnama_lengkap;

	--untuk membuat tmt pensiun
	vtanggal_lahir:= new.tanggal_lahir;
	if vtanggal_lahir is not null then
		vtipepegawaiid:= new.tipe_pegawai_id; veselonid:= ''; vjabatan:= '';
		--update tmt pensiun
		if vtipepegawaiid = '11' or vtipepegawaiid = '21' then
			select
			substring(a.eselon_id::text, 1,1) veselonid, a.nama vjabatan
			into veselonid, vjabatan
			from jabatan_riwayat a
			where a.jabatan_riwayat_id = new.jabatan_riwayat_id;
		end if;
		--raise notice 'sql %',vjabatan;

		if vtipepegawaiid = '11' and (substring(veselonid::text, 1,1) = '1' or substring(veselonid::text, 1,1) = '2') then
			select
			to_date('01-' || to_char(add_months(vtanggal_lahir, (60 * 12) + 1),  'mm-yyyy'), 'dd-mm-yyyy')
			into vtmt_pensiun;
		elsif vtipepegawaiid = '21' or (vtipepegawaiid = '22' and lower(vjabatan) like '%dokter%') then
			select
			to_date('01-' || to_char(add_months(vtanggal_lahir, (60 * 12) + 1),  'mm-yyyy'), 'dd-mm-yyyy')
			into vtmt_pensiun;
		else
			select
			to_date('01-' || to_char(add_months(vtanggal_lahir, (58 * 12) + 1),  'mm-yyyy'), 'dd-mm-yyyy')
			into vtmt_pensiun;
		end if;
		--raise notice 'sql %',vtmt_pensiun;
		new.vtmt_pensiun:= vtmt_pensiun;
	end if;

	--untuk membuat ttl
	vttl:= '';
	if coalesce(nullif(new.tempat_lahir, ''), null) is not null
	then
		vttl:= new.tempat_lahir;
	end if;

	if vtanggal_lahir is not null then
		vttl:= vttl || ', ' || to_char(vtanggal_lahir, 'dd') || ' ' || nama_bulan(to_char(vtanggal_lahir, 'mm')::integer) || ' ' || to_char(vtanggal_lahir, 'yyyy');
	end if;
	--raise notice 'sql %',vttl;
	new.vttl:= vttl;

  return new;
   
end;
$body$
language plpgsql volatile cost 100;
alter function ppegawai_detil_info() owner to postgres;
  
drop trigger if exists tpegawai_detil_info on pegawai;
create trigger tpegawai_detil_info
before insert or update
on pegawai
for each row
execute procedure ppegawai_detil_info();

update pegawai as u
set
pegawai_id= aggr.pegawai_id
from
(
  select a.pegawai_id
  from pegawai a
  where 1=1
  --and coalesce(nullif(format_nip_baru, ''), null) is not null
) as aggr
where u.pegawai_id = aggr.pegawai_id;

--proses data
--====================================================================================================================
drop function if exists pinsertduk(character varying, character varying, integer);
drop function if exists pinsertduk(character varying, character varying, character varying);
create or replace function pinsertduk(pperiode character varying, psatker character varying, ptipepegawai character varying)
  returns void as
$body$
declare
 sqlquery text ;
begin
	--select pinsertduk('032024', '', '')
	
	sqlquery:= '';
	if coalesce(nullif(psatker,'') , null ) is null
	then
		sqlquery := 'delete from duk where 
		periode = ''' || pperiode || '''
		and coalesce(nullif(satker_id_generate,'''') , null ) is null
		';

		/*
		and pegawai_id in (select pegawai_id from pegawai where coalesce(nullif(satker_id_generate,'''') , null ) is null
		if coalesce(nullif(ptipepegawai,'') , null ) is not null
      	then
			sqlquery := sqlquery || ' and (tipe_pegawai_id like ''' || ptipepegawai || '%'') ';
      	end if;

      	sqlquery := sqlquery || ')';
      	*/
   	else
		sqlquery := 'delete from duk where 
		periode = ''' || pperiode || '''
		and satker_id_generate = ''' || psatker || '''
		';

		/*
		and pegawai_id in (select pegawai_id from pegawai where satker_id_generate = ''' || psatker || '''
		if coalesce(nullif(ptipepegawai,'') , null ) is not null
      	then
			sqlquery := sqlquery || ' and (tipe_pegawai_id like ''' || ptipepegawai || '%'') ';
		end if;

      	sqlquery := sqlquery || ')';
      	*/
      
   	end if;

	if coalesce(nullif(sqlquery,'') , null ) is not null then
		--raise notice 'sql %',sqlquery;
		execute sqlquery;
	end if;

	sqlquery := '
	insert into duk 
	(
		pegawai_id, nip_lama, nip_baru, nama, tempat_lahir, tanggal_lahir, jenis_kelamin
		, status_pegawai, pangkat_id, gol_ruang, tmt_pangkat, jabatan, tmt_jabatan, eselon_id, eselon, tmt_eselon
		, masa_kerja_tahun, masa_kerja_bulan, diklat_struktural, tahun_diklat, jumlah_diklat_struktural
		, jumlah_diklat_nonstruktural, pendidikan, nama_sekolah, tahun_lulus, agama, usia, tipe_pegawai_id
		, satker_id, duk, periode, satker_id_generate
	)
	select
		pegawai_id, nip_lama, nip_baru, nama, tempat_lahir, tanggal_lahir, jenis_kelamin
		, status_pegawai, pangkat_id, gol_ruang, tmt_pangkat, jabatan, tmt_jabatan, eselon_id, eselon, tmt_eselon
		, masa_kerja_tahun, masa_kerja_bulan, diklat_struktural, tahun_diklat, jumlah_diklat_struktural
		, jumlah_diklat_nonstruktural, pendidikan, nama_sekolah, tahun_lulus, agama
		, usia, tipe_pegawai_id, satker_id
		,
		row_number () over (
		order by coalesce(d.pangkat_id, 11) desc, d.tmt_pangkat
  		, coalesce(d.eselon_id, 99), d.tmt_eselon, d.masa_kerja_tahun desc, coalesce(d.jumlah_diklat_nonstruktural, 0::numeric) desc
  		) duk
		, ''' || pperiode || ''', ''' || psatker || '''
	from
	(
		select
			d.pegawai_id, d.nip_lama, d.nip_baru, d.nama, d.tempat_lahir, d.tanggal_lahir, d.jenis_kelamin
			, d.status_pegawai, d.pangkat_id, d.gol_ruang, d.tmt_pangkat, d.jabatan, d.tmt_jabatan, d.eselon_id, d.eselon, d.tmt_eselon
			, 
			floor
			(
			d.masa_kerja_tahun + 
			case
			when d.masa_kerja_bulan + months_between(to_date(''01' || pperiode || ''', ''ddmmyyyy''), d.tmt_pangkat) = 12
			then 1
			when d.masa_kerja_bulan + months_between(to_date(''01' || pperiode || ''', ''ddmmyyyy''), d.tmt_pangkat) > 12
			then  (d.masa_kerja_bulan+months_between(to_date(''01' || pperiode || ''', ''ddmmyyyy''), d.tmt_pangkat) )  / 12 
			else 0 
			end
			) masa_kerja_tahun
			, 
			case 
			when d.masa_kerja_bulan + months_between(to_date(''01' || pperiode || ''', ''ddmmyyyy''), d.tmt_pangkat) = 12
			then 0
			when d.masa_kerja_bulan + months_between(to_date(''01' || pperiode || ''', ''ddmmyyyy''), d.tmt_pangkat) > 12
			then mod(d.masa_kerja_bulan + months_between(to_date(''01' || pperiode || ''', ''ddmmyyyy''), d.tmt_pangkat), 12)
			else (d.masa_kerja_bulan + months_between(to_date(''01' || pperiode || ''', ''ddmmyyyy''), d.tmt_pangkat))
			end masa_kerja_bulan
			, d.diklat_struktural, d.tahun_diklat, d.jumlah_diklat_struktural, d.jumlah_diklat_nonstruktural, d.pendidikan
			, d.nama_sekolah, d.tahun_lulus, d.agama
			, ambil_umur_duk(d.tanggal_lahir, to_date(''01' || pperiode || ''', ''ddmmyyyy'')) usia
			, d.tipe_pegawai_id, d.satker_id
		from daftar_urutan_pegawai() d
		where 1=1
		--and (d.status_pegawai in (''cpns'',''pns''))
	';

	if coalesce(nullif(ptipepegawai,'') , null ) is not null then
		sqlquery := sqlquery || ' and d.tipe_pegawai_id like ''' || ptipepegawai || '%'' ';
	end if;

	if coalesce(nullif(psatker,'') , null ) is not null and psatker != '-1' then
		sqlquery := sqlquery || ' and d.satker_id like ''' || psatker || '%'' ';
	end if;

	sqlquery := sqlquery || ' 
	) d
	where 1=1
	order by coalesce(d.pangkat_id, 11) desc, d.tmt_pangkat
  		, coalesce(d.eselon_id, 99), d.tmt_eselon, d.masa_kerja_tahun desc, coalesce(d.jumlah_diklat_nonstruktural, 0::numeric) desc
  	';

	if coalesce(nullif(sqlquery,'') , null ) is not null then
		--raise notice 'sql %',sqlquery;
		execute sqlquery;
	end if;

end;
$body$
language plpgsql volatile cost 100;
alter function pinsertduk(character varying, character varying, character varying) owner to postgres;

--indexing
--====================================================================================================================
drop index if exists duk_indexing;
create index duk_indexing on duk (satker_id_generate, duk);

--cursor
--====================================================================================================================
drop type if exists daftar_urutan_pegawai_type;
create type daftar_urutan_pegawai_type as (pegawai_id numeric, nip_lama character varying, nip_baru character varying, nama character varying, ttl character varying
, jenis_kelamin character varying, status_pegawai character varying, pangkat_id numeric, gol_ruang character varying
, tmt_pangkat date, jabatan character varying, tmt_jabatan date, eselon_id numeric, eselon character varying
, tmt_eselon date, masa_kerja character varying, diklat_struktural character varying, tahun_diklat numeric
, jumlah_diklat_struktural numeric, jumlah_diklat_nonstruktural numeric
, pendidikan character varying, nama_sekolah character varying, tahun_lulus character varying, agama character varying
, usia character varying, tipe_pegawai_id character varying, satker_id character varying
, masa_kerja_tahun numeric, masa_kerja_bulan numeric, tempat_lahir character varying, tanggal_lahir date);

drop function if exists daftar_urutan_pegawai_type();
--select * from daftar_urutan_pegawai();
create or replace function daftar_urutan_pegawai() returns setof daftar_urutan_pegawai_type as $$
declare
cur refcursor;
query text;
rec daftar_urutan_pegawai_type%rowtype;
begin
	query := '
		select
			p.pegawai_id, p.nip_lama, p.nip_baru, p.vnama_lengkap nama
			, p.vttl ttl, p.jenis_kelamin, sp.nama status_pegawai
			, coalesce(pt.pangkat_id, 11) pangkat_id, pt.pangkat_kode gol_ruang, pt.pangkat_tmt tmt_pangkat
			, jt.jabatan, jt.tmt_jabatan, coalesce(jt.eselon_id, 99) eselon_id, jt.eselon, jt.tmt_eselon
			, (pt.pangkat_masa_kerja_tahun || '' - ''::text) || pt.pangkat_masa_kerja_bulan masa_kerja
			, ds.nama diklat_struktural, ds.tahun tahun_diklat
			, coalesce(ds1.jumlah_diklat, 0) as jumlah_diklat_struktural
			, coalesce(dns.jumlah_diklat, 0) as jumlah_diklat_nonstruktural
			, (pd.pendidikan::text || '' - ''::text) || pd.jurusan::text pendidikan
			, pd.nama_sekolah, pd.tahun tahun_lulus, ag.nama agama
			,
			(
			case
			when (to_number(to_char(now(), ''mm''::text), ''99''::text) - to_number(to_char(p.tanggal_lahir::timestamp with time zone, ''mm''::text), ''99''::text)) < 0::numeric then to_number(to_char(now(), ''yyyy''::text), ''9999''::text) - to_number(to_char(p.tanggal_lahir::timestamp with time zone, ''yyyy''::text), ''9999''::text) - 1::numeric
			else to_number(to_char(now(), ''yyyy''::text), ''9999''::text) - to_number(to_char(p.tanggal_lahir::timestamp with time zone, ''yyyy''::text), ''9999''::text)
			end || '' - ''::text) ||
			case
			when (to_number(to_char(now(), ''mm''::text), ''99''::text) - to_number(to_char(p.tanggal_lahir::timestamp with time zone, ''mm''::text), ''99''::text)) < 0::numeric then 12::numeric + to_number(to_char(now(), ''mm''::text), ''99''::text) - to_number(to_char(p.tanggal_lahir::timestamp with time zone, ''mm''::text), ''99''::text)
			else to_number(to_char(now(), ''mm''::text), ''99''::text) - to_number(to_char(p.tanggal_lahir::timestamp with time zone, ''mm''::text), ''99''::text)
			end usia
			, p.tipe_pegawai_id, p.satker_id
			, pt.pangkat_masa_kerja_tahun masa_kerja_tahun, pt.pangkat_masa_kerja_bulan masa_kerja_bulan
			, p.tempat_lahir, p.tanggal_lahir
		from pegawai p
		inner join status_pegawai sp on p.status_pegawai = sp.status_pegawai_id
		left join
		(
			select
				a.jabatan_riwayat_id, coalesce(a.eselon_id,99) eselon_id, b.nama eselon
				, a.tmt_jabatan, a.nama jabatan, a.tmt_eselon
			from jabatan_riwayat a
			left join eselon b on a.eselon_id = b.eselon_id
		) jt on p.jabatan_riwayat_id = jt.jabatan_riwayat_id
		left join
		(
			select
				a.pangkat_riwayat_id, a.pangkat_id, b.kode pangkat_kode, b.nama pangkat_nama, a.tmt_pangkat pangkat_tmt
				, a.masa_kerja_tahun pangkat_masa_kerja_tahun, a.masa_kerja_bulan pangkat_masa_kerja_bulan
			from pangkat_riwayat a
			left join pangkat b on a.pangkat_id = b.pangkat_id
		) pt on p.pangkat_riwayat_id = pt.pangkat_riwayat_id
		left join
		(
			select
				a.diklat_struktural_id, c.nama, a.tahun
			from diklat_struktural a
			left join diklat c on a.diklat_id = c.diklat_id
		) ds on p.diklat_struktural_id = ds.diklat_struktural_id
		left join
		(
			select
				x.pegawai_id, count(1) jumlah_diklat
			from diklat_struktural x
			group by x.pegawai_id
		) ds1 on p.pegawai_id = ds1.pegawai_id
		left join 
		(
			select dkt.pegawai_id, sum(dkt.jumlah) as jumlah_diklat
			from 
			(
				select a.pegawai_id, count(a.pegawai_id) as jumlah
				from diklat_fungsional a
				group by a.pegawai_id
				union all
				select a.pegawai_id, count(a.pegawai_id) as jumlah
				from diklat_teknis a
				group by a.pegawai_id
			) dkt
			group by dkt.pegawai_id
		) dns on p.pegawai_id = dns.pegawai_id
		left join
		(
			select 
			a.pendidikan_riwayat_id, a.pegawai_id, c.nama pendidikan, a.jurusan, a.nama nama_sekolah
			, to_char(a.tanggal_sttb, ''yyyy'') tahun
			from pendidikan_riwayat a
			left join pendidikan c on a.pendidikan_id = c.pendidikan_id
			where 1 = 1
		) pd on p.pendidikan_riwayat_id = pd.pendidikan_riwayat_id
		left join agama ag on p.agama_id = ag.agama_id
		where 1=1
		and p.status_pegawai in (1, 2)
  		order by coalesce(pt.pangkat_id, 11) desc, pt.pangkat_tmt
  		, coalesce(jt.eselon_id, 99), jt.tmt_eselon, pt.pangkat_masa_kerja_tahun desc, coalesce(dns.jumlah_diklat, 0::numeric) desc
	';

	open cur for execute query;
		fetch cur into rec;
			while found loop
			return next rec;
			fetch cur into rec;
		end loop;
	close cur;
end;
$$ language plpgsql strict;